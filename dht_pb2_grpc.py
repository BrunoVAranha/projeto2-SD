# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import dht_pb2 as dht__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in dht_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class NodeStub(object):
    """The Node service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Join = channel.unary_unary(
                '/dht.Node/Join',
                request_serializer=dht__pb2.JoinRequest.SerializeToString,
                response_deserializer=dht__pb2.JoinResponse.FromString,
                _registered_method=True)
        self.QueryNode = channel.unary_unary(
                '/dht.Node/QueryNode',
                request_serializer=dht__pb2.NodeQueryRequest.SerializeToString,
                response_deserializer=dht__pb2.NodeQueryResponse.FromString,
                _registered_method=True)
        self.UpdateNode = channel.unary_unary(
                '/dht.Node/UpdateNode',
                request_serializer=dht__pb2.UpdateNodeRequest.SerializeToString,
                response_deserializer=dht__pb2.UpdateNodeResponse.FromString,
                _registered_method=True)
        self.UpdatePredecessor = channel.unary_unary(
                '/dht.Node/UpdatePredecessor',
                request_serializer=dht__pb2.UpdatePredecessorRequest.SerializeToString,
                response_deserializer=dht__pb2.UpdatePredecessorResponse.FromString,
                _registered_method=True)
        self.UpdateSucessor = channel.unary_unary(
                '/dht.Node/UpdateSucessor',
                request_serializer=dht__pb2.UpdateSucessorRequest.SerializeToString,
                response_deserializer=dht__pb2.UpdateSucessorResponse.FromString,
                _registered_method=True)
        self.SendInt = channel.unary_unary(
                '/dht.Node/SendInt',
                request_serializer=dht__pb2.IntRequest.SerializeToString,
                response_deserializer=dht__pb2.IntResponse.FromString,
                _registered_method=True)
        self.AddCode = channel.unary_unary(
                '/dht.Node/AddCode',
                request_serializer=dht__pb2.AddCodeRequest.SerializeToString,
                response_deserializer=dht__pb2.AddCodeResponse.FromString,
                _registered_method=True)
        self.Ping = channel.unary_unary(
                '/dht.Node/Ping',
                request_serializer=dht__pb2.PingRequest.SerializeToString,
                response_deserializer=dht__pb2.PingResponse.FromString,
                _registered_method=True)
        self.LookUp = channel.unary_unary(
                '/dht.Node/LookUp',
                request_serializer=dht__pb2.LookUpRequest.SerializeToString,
                response_deserializer=dht__pb2.LookUpResponse.FromString,
                _registered_method=True)
        self.SendContent = channel.unary_unary(
                '/dht.Node/SendContent',
                request_serializer=dht__pb2.SendContentRequest.SerializeToString,
                response_deserializer=dht__pb2.SendContentResponse.FromString,
                _registered_method=True)


class NodeServicer(object):
    """The Node service definition.
    """

    def Join(self, request, context):
        """Sends a join request to the node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def QueryNode(self, request, context):
        """Queries the successor and predecessor of a given node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNode(self, request, context):
        """Updates the successor and predecessor for a given node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePredecessor(self, request, context):
        """Updates the predecessor of a given node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateSucessor(self, request, context):
        """Updates the successor of a given node.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendInt(self, request, context):
        """Method that takes an integer and returns an acknowledgment
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddCode(self, request, context):
        """enviar um inteiro
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Ping(self, request, context):
        """verificar se a porta estÃ¡ sendo usadaS
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LookUp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendContent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Join': grpc.unary_unary_rpc_method_handler(
                    servicer.Join,
                    request_deserializer=dht__pb2.JoinRequest.FromString,
                    response_serializer=dht__pb2.JoinResponse.SerializeToString,
            ),
            'QueryNode': grpc.unary_unary_rpc_method_handler(
                    servicer.QueryNode,
                    request_deserializer=dht__pb2.NodeQueryRequest.FromString,
                    response_serializer=dht__pb2.NodeQueryResponse.SerializeToString,
            ),
            'UpdateNode': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNode,
                    request_deserializer=dht__pb2.UpdateNodeRequest.FromString,
                    response_serializer=dht__pb2.UpdateNodeResponse.SerializeToString,
            ),
            'UpdatePredecessor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePredecessor,
                    request_deserializer=dht__pb2.UpdatePredecessorRequest.FromString,
                    response_serializer=dht__pb2.UpdatePredecessorResponse.SerializeToString,
            ),
            'UpdateSucessor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSucessor,
                    request_deserializer=dht__pb2.UpdateSucessorRequest.FromString,
                    response_serializer=dht__pb2.UpdateSucessorResponse.SerializeToString,
            ),
            'SendInt': grpc.unary_unary_rpc_method_handler(
                    servicer.SendInt,
                    request_deserializer=dht__pb2.IntRequest.FromString,
                    response_serializer=dht__pb2.IntResponse.SerializeToString,
            ),
            'AddCode': grpc.unary_unary_rpc_method_handler(
                    servicer.AddCode,
                    request_deserializer=dht__pb2.AddCodeRequest.FromString,
                    response_serializer=dht__pb2.AddCodeResponse.SerializeToString,
            ),
            'Ping': grpc.unary_unary_rpc_method_handler(
                    servicer.Ping,
                    request_deserializer=dht__pb2.PingRequest.FromString,
                    response_serializer=dht__pb2.PingResponse.SerializeToString,
            ),
            'LookUp': grpc.unary_unary_rpc_method_handler(
                    servicer.LookUp,
                    request_deserializer=dht__pb2.LookUpRequest.FromString,
                    response_serializer=dht__pb2.LookUpResponse.SerializeToString,
            ),
            'SendContent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendContent,
                    request_deserializer=dht__pb2.SendContentRequest.FromString,
                    response_serializer=dht__pb2.SendContentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dht.Node', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dht.Node', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Node(object):
    """The Node service definition.
    """

    @staticmethod
    def Join(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/Join',
            dht__pb2.JoinRequest.SerializeToString,
            dht__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def QueryNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/QueryNode',
            dht__pb2.NodeQueryRequest.SerializeToString,
            dht__pb2.NodeQueryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/UpdateNode',
            dht__pb2.UpdateNodeRequest.SerializeToString,
            dht__pb2.UpdateNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePredecessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/UpdatePredecessor',
            dht__pb2.UpdatePredecessorRequest.SerializeToString,
            dht__pb2.UpdatePredecessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateSucessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/UpdateSucessor',
            dht__pb2.UpdateSucessorRequest.SerializeToString,
            dht__pb2.UpdateSucessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendInt(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/SendInt',
            dht__pb2.IntRequest.SerializeToString,
            dht__pb2.IntResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AddCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/AddCode',
            dht__pb2.AddCodeRequest.SerializeToString,
            dht__pb2.AddCodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/Ping',
            dht__pb2.PingRequest.SerializeToString,
            dht__pb2.PingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LookUp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/LookUp',
            dht__pb2.LookUpRequest.SerializeToString,
            dht__pb2.LookUpResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendContent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dht.Node/SendContent',
            dht__pb2.SendContentRequest.SerializeToString,
            dht__pb2.SendContentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
