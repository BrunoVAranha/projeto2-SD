syntax = "proto3";

package dht;

// The request message containing the node ID and port.
message JoinRequest {
  string node_id = 1;
  int32 node_num = 2;
  int32 port = 3;
}

// The response message confirming the join request.
message JoinResponse {
  bool success = 1;
}

// The request message containing the node ID to update.
message UpdateNodeRequest {
  int32 node_num = 1;
}

// The response message confirming the update.
message UpdateNodeResponse {
  bool success = 1;
}

message UpdatePredecessorRequest {
  string node_id = 1;
  int32 node_num = 2;
}

message UpdatePredecessorResponse {
  bool success = 1;
}

message UpdateSucessorRequest {
  string node_id = 1;
  int32 node_num = 2;
}

message UpdateSucessorResponse {
  bool success = 1;
}

// The request message containing the node ID.
message NodeQueryRequest {
}

// The response message containing the node's successor and predecessor.
message NodeQueryResponse {
  string successor = 1;
  string predecessor = 2;
}

// Define the message types
message IntRequest {
    int32 number = 1;
}

message IntResponse {
    string message = 1;
}

// Define the message types
message AddCodeRequest {
    string code_id = 1;
    int32 code_num = 2;
}

message AddCodeResponse {
    string message = 1;
}

// The request message containing no data, just a ping
message PingRequest {}

// The response message containing a status message
message PingResponse {
  bool is_alive = 1;
}

message LookUpRequest{
  string code = 1;
}

message LookUpResponse{
  string url = 1;
}

message SendContentRequest{
  int32 key = 1;
  string value = 2;
}

message SendContentResponse{
  bool success = 1;
}

// The Node service definition.
service Node {
  // Sends a join request to the node.
  rpc Join (JoinRequest) returns (JoinResponse);

  // Queries the successor and predecessor of a given node.
  rpc QueryNode (NodeQueryRequest) returns (NodeQueryResponse);

  // Updates the successor and predecessor for a given node.
  rpc UpdateNode (UpdateNodeRequest) returns (UpdateNodeResponse);

  // Updates the predecessor of a given node.
  rpc UpdatePredecessor (UpdatePredecessorRequest) returns (UpdatePredecessorResponse);

  // Updates the successor of a given node.
  rpc UpdateSucessor (UpdateSucessorRequest) returns (UpdateSucessorResponse);

  // Method that takes an integer and returns an acknowledgment
  rpc SendInt(IntRequest) returns (IntResponse) {}

  // enviar um inteiro
  rpc AddCode(AddCodeRequest) returns (AddCodeResponse) {}

  // verificar se a porta est√° sendo usadaS
  rpc Ping (PingRequest) returns (PingResponse);

  rpc LookUp(LookUpRequest) returns (LookUpResponse);

  rpc SendContent(SendContentRequest) returns (SendContentResponse);

}